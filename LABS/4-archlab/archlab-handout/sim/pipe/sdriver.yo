                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4f004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f64804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | # You can modify this portion
                            |     # Loop header
0x032:                      | L0:
0x032: c0f2f6ffffffffffffff |     iaddq $-10,%rdx 
0x03c: 720602000000000000   |     jl LASTN         # 处理最后小于n个数
                            | 
0x045:                      | L1:         # 对10个数两个一组处理，避免load/use气泡
0x045: 50870000000000000000 |     mrmovq (%rdi), %r8
0x04f: 50970800000000000000 |     mrmovq 8(%rdi),%r9
0x059: 40860000000000000000 |     rmmovq %r8,(%rsi)
0x063: 6288                 |     andq %r8, %r8
0x065: 717800000000000000   |     jle L2
0x06e: c0f00100000000000000 |     iaddq $1,%rax    # if (val > 0) count++
0x078:                      | L2: 
0x078: 40960800000000000000 |     rmmovq %r9,8(%rsi)
0x082: 6299                 |     andq %r9,%r9
0x084: 719700000000000000   |     jle L3
0x08d: c0f00100000000000000 |     iaddq $1,%rax
0x097:                      | L3:
0x097: 50871000000000000000 |     mrmovq 16(%rdi), %r8
0x0a1: 50971800000000000000 |     mrmovq 24(%rdi), %r9
0x0ab: 40861000000000000000 |     rmmovq %r8,16(%rsi)
0x0b5: 6288                 |     andq %r8, %r8
0x0b7: 71ca00000000000000   |     jle L4
0x0c0: c0f00100000000000000 |     iaddq $1, %rax      # if (val > 0) count++
0x0ca:                      | L4:
0x0ca: 40961800000000000000 |     rmmovq %r9,24(%rsi)
0x0d4: 6299                 |     andq %r9,%r9
0x0d6: 71e900000000000000   |     jle L5
0x0df: c0f00100000000000000 |     iaddq $1,%rax
0x0e9:                      | L5:
0x0e9: 50872000000000000000 |     mrmovq 32(%rdi), %r8
0x0f3: 50972800000000000000 |     mrmovq 40(%rdi), %r9
0x0fd: 40862000000000000000 |     rmmovq %r8,32(%rsi)
0x107: 6288                 |     andq %r8, %r8 
0x109: 711c01000000000000   |     jle L6
0x112: c0f00100000000000000 |     iaddq $1, %rax      # if (val > 0) count++
0x11c:                      | L6:
0x11c: 40962800000000000000 |     rmmovq %r9,40(%rsi)
0x126: 6299                 |     andq %r9,%r9
0x128: 713b01000000000000   |     jle L7
0x131: c0f00100000000000000 |     iaddq $1,%rax 
0x13b:                      | L7:
0x13b: 50873000000000000000 |     mrmovq 48(%rdi), %r8
0x145: 50973800000000000000 |     mrmovq 56(%rdi), %r9
0x14f: 40863000000000000000 |     rmmovq %r8,48(%rsi)
0x159: 6288                 |     andq %r8, %r8  
0x15b: 716e01000000000000   |     jle L8
0x164: c0f00100000000000000 |     iaddq $1, %rax      # if (val > 0) count++
0x16e:                      | L8:
0x16e: 40963800000000000000 |     rmmovq %r9,56(%rsi)
0x178: 6299                 |     andq %r9,%r9
0x17a: 718d01000000000000   |     jle L9
0x183: c0f00100000000000000 |     iaddq $1,%rax 
0x18d:                      | L9:
0x18d: 50874000000000000000 |     mrmovq 64(%rdi), %r8
0x197: 50974800000000000000 |     mrmovq 72(%rdi), %r9
0x1a1: 40864000000000000000 |     rmmovq %r8,64(%rsi)
0x1ab: 6288                 |     andq %r8, %r8   
0x1ad: 71c001000000000000   |     jle L10
0x1b6: c0f00100000000000000 |     iaddq $1, %rax        # if (val > 0) count++
0x1c0:                      | L10:
0x1c0: 40964800000000000000 |     rmmovq %r9,72(%rsi)
0x1ca: 6299                 |     andq %r9,%r9
0x1cc: 71df01000000000000   |     jle L11
0x1d5: c0f00100000000000000 |     iaddq $1,%rax          # if (val > 0) count++
                            | 
0x1df:                      | L11:                     # next loop preparation
0x1df: c0f75000000000000000 |     iaddq $80,%rdi
0x1e9: c0f65000000000000000 |     iaddq $80,%rsi
0x1f3: c0f2f6ffffffffffffff |     iaddq $-10,%rdx
0x1fd: 754500000000000000   |     jge L1
                            | 
0x206:                      | LASTN:
0x206: 50a70000000000000000 |     mrmovq (%rdi), %r10
0x210: c0f20700000000000000 |     iaddq $7,%rdx        # 判断剩余的len与3(10-7)的大小关系
0x21a: 723502000000000000   |     jl  LESS3     # <3
0x223: 765c02000000000000   |     jg  MORE3        # >3
0x22c: 739303000000000000   |     je  EQUAL3     # =3
                            | 
0x235:                      | LESS3:
0x235: c0f20200000000000000 |     iaddq   $2,%rdx      # 10-7-2=1
0x23f: 73f803000000000000   |     je  LAST1_2
0x248: c0f2ffffffffffffffff |     iaddq   $-1,%rdx    # len == 2
0x252: 73bc03000000000000   |     je  LAST2
0x25b: 90                   |     ret         # len == 0 
0x25c:                      | MORE3:
0x25c: c0f2fdffffffffffffff |     iaddq   $-3,%rdx    # 10-7+3=6 
0x266: 769402000000000000   |     jg  MORE6      #  len > 6
0x26f: 731803000000000000   |     je  EQUAL6     # len == 6
0x278: c0f20100000000000000 |     iaddq   $1,%rdx 
0x282: 726a03000000000000   |     jl LAST4     # len == 4
0x28b: 734103000000000000   |     je  LAST5     # len == 5    
0x294:                      | MORE6:
0x294: c0f2feffffffffffffff |     iaddq   $-2,%rdx
0x29e: 72ef02000000000000   |     jl  LAST7
0x2a7: 50974000000000000000 |     mrmovq 64(%rdi), %r9   # read src[8] from src
0x2b1: 73c602000000000000   |     je  LAST8    # len=8
                            | 
0x2ba:                      | LAST9:
0x2ba: 40964000000000000000 |     rmmovq %r9, 64(%rsi)
0x2c4: 6299                 |     andq %r9, %r9     # set cc
                            | 
0x2c6:                      | LAST8:
0x2c6: 50873800000000000000 |     mrmovq 56(%rdi), %r8   # read src[7] from src
0x2d0: 71e302000000000000   |     jle LAST8_2    
0x2d9: c0f00100000000000000 |     iaddq $1, %rax        # if(rsi[8]>0) count++
0x2e3:                      | LAST8_2:    
0x2e3: 40863800000000000000 |     rmmovq %r8, 56(%rsi)
0x2ed: 6288                 |     andq %r8, %r8     # set cc
                            | 
0x2ef:                      | LAST7:
0x2ef: 50873000000000000000 |     mrmovq 48(%rdi), %r8   # read src[6] from src
0x2f9: 710c03000000000000   |     jle LAST7_2   
0x302: c0f00100000000000000 |     iaddq $1, %rax        # if(rsi[7]>0) count++
0x30c:                      | LAST7_2:        
0x30c: 40863000000000000000 |     rmmovq %r8, 48(%rsi)
0x316: 6288                 |     andq %r8, %r8     # set cc
                            | 
0x318:                      | EQUAL6:
0x318: 50872800000000000000 |     mrmovq 40(%rdi), %r8   # read src[5] from src
0x322: 713503000000000000   |     jle LAST6_2
0x32b: c0f00100000000000000 |     iaddq $1, %rax        # if(rsi[6]>0) count++
0x335:                      | LAST6_2:        
0x335: 40862800000000000000 |     rmmovq %r8, 40(%rsi)
0x33f: 6288                 |     andq %r8, %r8     # set cc
                            | 
0x341:                      | LAST5:
0x341: 50872000000000000000 |     mrmovq 32(%rdi), %r8   # read src[4] from src
0x34b: 715e03000000000000   |     jle LAST5_2   
0x354: c0f00100000000000000 |     iaddq $1, %rax        # if(rsi[5]>0) count++
0x35e:                      | LAST5_2:
0x35e: 40862000000000000000 |     rmmovq %r8, 32(%rsi)
0x368: 6288                 |     andq %r8, %r8     # set cc
                            | 
0x36a:                      | LAST4:
0x36a: 50871800000000000000 |     mrmovq 24(%rdi), %r8   # read src[3] from src
0x374: 718703000000000000   |     jle LAST4_2 
0x37d: c0f00100000000000000 |     iaddq $1, %rax        # if(rsi[4]>0) count++
0x387:                      | LAST4_2:
0x387: 40861800000000000000 |     rmmovq %r8, 24(%rsi)
0x391: 6288                 |     andq %r8, %r8     # set cc
                            | 
0x393:                      | EQUAL3:
0x393: 50871000000000000000 |     mrmovq 16(%rdi), %r8   # read src[2] from src
0x39d: 71b003000000000000   |     jle EQUAL3_2   
0x3a6: c0f00100000000000000 |     iaddq $1, %rax        # if(rsi[3]>0) count++
0x3b0:                      | EQUAL3_2:
0x3b0: 40861000000000000000 |     rmmovq %r8, 16(%rsi)
0x3ba: 6288                 |     andq %r8, %r8     # set cc
                            | 
0x3bc:                      | LAST2:
0x3bc: 50870800000000000000 |     mrmovq 8(%rdi), %r8    # read src[1] from src
0x3c6: 71d903000000000000   |     jle LAST2_2   
0x3cf: c0f00100000000000000 |     iaddq $1, %rax        # if(rsi[2]>0) count++
0x3d9:                      | LAST2_2:
0x3d9: 40860800000000000000 |     rmmovq %r8, 8(%rsi)
0x3e3: 6288                 |     andq %r8, %r8 
                            | 
0x3e5:                      | LAST1:
                            |     # mrmovq (%rdi), %r8 # read src[0] from src
0x3e5: 71f803000000000000   |     jle LAST1_2        # 上一步操作(如果是跳转到这里执行直接跳转，不然判断上一个记录到dst的数是不是正数)
0x3ee: c0f00100000000000000 |     iaddq $1, %rax        # if(rsi[1]>0) count++
0x3f8:                      | LAST1_2:
0x3f8: 40a60000000000000000 |     rmmovq %r10, (%rsi)
0x402: 62aa                 |     andq %r10, %r10
0x404: 711704000000000000   |     jle Done 
0x40d: c0f00100000000000000 |     iaddq $1, %rax        # if(rsi[0]>0) count++
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x417:                      | Done:
0x417: 90                   |     ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x418:                      | End:
                            | #/* $end ncopy-ys */EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x418:                      | 	.align 8
0x418:                      | src:
0x418: ffffffffffffffff     | 	.quad -1
0x420: 0200000000000000     | 	.quad 2
0x428: fdffffffffffffff     | 	.quad -3
0x430: 0400000000000000     | 	.quad 4
0x438: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x440:                      | 	.align 16
0x440:                      | Predest:
0x440: fadebc0000000000     | 	.quad 0xbcdefa
0x448:                      | dest:
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468:                      | Postdest:
0x468: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x470:                      | .align 8
                            | # Run time stack
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
0x4d0: 0000000000000000     | 	.quad 0
0x4d8: 0000000000000000     | 	.quad 0
0x4e0: 0000000000000000     | 	.quad 0
0x4e8: 0000000000000000     | 	.quad 0
                            | 
0x4f0:                      | Stack:
