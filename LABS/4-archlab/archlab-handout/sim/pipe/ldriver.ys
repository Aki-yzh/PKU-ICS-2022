#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

# You can modify this portion
    # Loop header
L0:
    iaddq $-10,%rdx 
    jl LASTN         # 处理最后小于n个数

L1:         # 对10个数两个一组处理，避免load/use气泡
    mrmovq (%rdi), %r8
    mrmovq 8(%rdi),%r9
    rmmovq %r8,(%rsi)
    andq %r8, %r8
    jle L2
    iaddq $1,%rax    # if (val > 0) count++
L2: 
    rmmovq %r9,8(%rsi)
    andq %r9,%r9
    jle L3
    iaddq $1,%rax
L3:
    mrmovq 16(%rdi), %r8
    mrmovq 24(%rdi), %r9
    rmmovq %r8,16(%rsi)
    andq %r8, %r8
    jle L4
    iaddq $1, %rax      # if (val > 0) count++
L4:
    rmmovq %r9,24(%rsi)
    andq %r9,%r9
    jle L5
    iaddq $1,%rax
L5:
    mrmovq 32(%rdi), %r8
    mrmovq 40(%rdi), %r9
    rmmovq %r8,32(%rsi)
    andq %r8, %r8 
    jle L6
    iaddq $1, %rax      # if (val > 0) count++
L6:
    rmmovq %r9,40(%rsi)
    andq %r9,%r9
    jle L7
    iaddq $1,%rax 
L7:
    mrmovq 48(%rdi), %r8
    mrmovq 56(%rdi), %r9
    rmmovq %r8,48(%rsi)
    andq %r8, %r8  
    jle L8
    iaddq $1, %rax      # if (val > 0) count++
L8:
    rmmovq %r9,56(%rsi)
    andq %r9,%r9
    jle L9
    iaddq $1,%rax 
L9:
    mrmovq 64(%rdi), %r8
    mrmovq 72(%rdi), %r9
    rmmovq %r8,64(%rsi)
    andq %r8, %r8   
    jle L10
    iaddq $1, %rax        # if (val > 0) count++
L10:
    rmmovq %r9,72(%rsi)
    andq %r9,%r9
    jle L11
    iaddq $1,%rax          # if (val > 0) count++

L11:                     # next loop preparation
    iaddq $80,%rdi
    iaddq $80,%rsi
    iaddq $-10,%rdx
    jge L1

LASTN:
    mrmovq (%rdi), %r10
    iaddq $7,%rdx        # 判断剩余的len与3(10-7)的大小关系
    jl  LESS3     # <3
    jg  MORE3        # >3
    je  EQUAL3     # =3

LESS3:
    iaddq   $2,%rdx      # 10-7-2=1
    je  LAST1_2
    iaddq   $-1,%rdx    # len == 2
    je  LAST2
    ret         # len == 0 
MORE3:
    iaddq   $-3,%rdx    # 10-7+3=6 
    jg  MORE6      #  len > 6
    je  EQUAL6     # len == 6
    iaddq   $1,%rdx 
    jl LAST4     # len == 4
    je  LAST5     # len == 5    
MORE6:
    iaddq   $-2,%rdx
    jl  LAST7
    mrmovq 64(%rdi), %r9   # read src[8] from src
    je  LAST8    # len=8

LAST9:
    rmmovq %r9, 64(%rsi)
    andq %r9, %r9     # set cc

LAST8:
    mrmovq 56(%rdi), %r8   # read src[7] from src
    jle LAST8_2    
    iaddq $1, %rax        # if(rsi[8]>0) count++
LAST8_2:    
    rmmovq %r8, 56(%rsi)
    andq %r8, %r8     # set cc

LAST7:
    mrmovq 48(%rdi), %r8   # read src[6] from src
    jle LAST7_2   
    iaddq $1, %rax        # if(rsi[7]>0) count++
LAST7_2:        
    rmmovq %r8, 48(%rsi)
    andq %r8, %r8     # set cc

EQUAL6:
    mrmovq 40(%rdi), %r8   # read src[5] from src
    jle LAST6_2
    iaddq $1, %rax        # if(rsi[6]>0) count++
LAST6_2:        
    rmmovq %r8, 40(%rsi)
    andq %r8, %r8     # set cc

LAST5:
    mrmovq 32(%rdi), %r8   # read src[4] from src
    jle LAST5_2   
    iaddq $1, %rax        # if(rsi[5]>0) count++
LAST5_2:
    rmmovq %r8, 32(%rsi)
    andq %r8, %r8     # set cc

LAST4:
    mrmovq 24(%rdi), %r8   # read src[3] from src
    jle LAST4_2 
    iaddq $1, %rax        # if(rsi[4]>0) count++
LAST4_2:
    rmmovq %r8, 24(%rsi)
    andq %r8, %r8     # set cc

EQUAL3:
    mrmovq 16(%rdi), %r8   # read src[2] from src
    jle EQUAL3_2   
    iaddq $1, %rax        # if(rsi[3]>0) count++
EQUAL3_2:
    rmmovq %r8, 16(%rsi)
    andq %r8, %r8     # set cc

LAST2:
    mrmovq 8(%rdi), %r8    # read src[1] from src
    jle LAST2_2   
    iaddq $1, %rax        # if(rsi[2]>0) count++
LAST2_2:
    rmmovq %r8, 8(%rsi)
    andq %r8, %r8 

LAST1:
    # mrmovq (%rdi), %r8 # read src[0] from src
    jle LAST1_2        # 上一步操作(如果是跳转到这里执行直接跳转，不然判断上一个记录到dst的数是不是正数)
    iaddq $1, %rax        # if(rsi[1]>0) count++
LAST1_2:
    rmmovq %r10, (%rsi)
    andq %r10, %r10
    jle Done 
    iaddq $1, %rax        # if(rsi[0]>0) count++

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
    ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad -3
	.quad 4
	.quad -5
	.quad 6
	.quad -7
	.quad -8
	.quad 9
	.quad -10
	.quad 11
	.quad -12
	.quad -13
	.quad -14
	.quad -15
	.quad 16
	.quad 17
	.quad -18
	.quad -19
	.quad 20
	.quad -21
	.quad -22
	.quad 23
	.quad 24
	.quad 25
	.quad -26
	.quad 27
	.quad 28
	.quad -29
	.quad -30
	.quad 31
	.quad 32
	.quad 33
	.quad 34
	.quad -35
	.quad -36
	.quad -37
	.quad -38
	.quad 39
	.quad -40
	.quad -41
	.quad -42
	.quad 43
	.quad 44
	.quad -45
	.quad -46
	.quad 47
	.quad -48
	.quad -49
	.quad -50
	.quad -51
	.quad -52
	.quad -53
	.quad 54
	.quad -55
	.quad 56
	.quad 57
	.quad 58
	.quad 59
	.quad 60
	.quad 61
	.quad 62
	.quad 63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
